// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Data;

#nullable disable

namespace WebApplication2.Library.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221115051419_Populate")]
    partial class Populate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentProject")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentTenant")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Projects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tenants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentProject");

                    b.HasIndex("CurrentTenant");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Data.Devices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PushAuth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PushEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PushP256DH")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.MainItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("myDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("MainItem", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CD")
                        .HasColumnType("datetime2");

                    b.Property<string>("CU")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Global")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MD")
                        .HasColumnType("datetime2");

                    b.Property<string>("MU")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CU");

                    b.HasIndex("MU");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TenantId");

                    b.ToTable("Master", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Masters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Masters", "Core");
                });

            modelBuilder.Entity("WebApplication2.Data.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AjaxUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("App")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Javascript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavController")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menu", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.ModelItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModelItem", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Module", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.NDEs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NDEs", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.NDEStages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NDEStages", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Project", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lng")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Scan", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States", "Core");
                });

            modelBuilder.Entity("WebApplication2.Data.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StyleSheet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenant", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Test", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Type", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Type", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Upload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Upload", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CU")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CU");

                    b.ToTable("UserSettings", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WeldStatuses", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasIndex("TenantId");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("WebApplication2.Data.Class", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Classes", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.Consumables", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Consumables", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.Drawing", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Master");

                    b.Property<bool?>("Bool1")
                        .HasColumnType("bit");

                    b.Property<bool>("Bool2")
                        .HasColumnType("bit");

                    b.ToTable("Drawing", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Drawings", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Drawings", "Document");
                });

            modelBuilder.Entity("WebApplication2.Data.Fitters", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Fitters", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.NDEReports", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NDEId")
                        .HasColumnType("int");

                    b.HasIndex("NDEId");

                    b.ToTable("NDEReports", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.NDERequests", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NDEId")
                        .HasColumnType("int");

                    b.HasIndex("NDEId");

                    b.ToTable("NDERequests", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.Sheet", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Master");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.ToTable("Sheet", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.Sheets", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Sheets", "Document");
                });

            modelBuilder.Entity("WebApplication2.Data.Test1MainItem", b =>
                {
                    b.HasBaseType("WebApplication2.Data.MainItem");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("tobeDeleted")
                        .HasColumnType("bit");

                    b.ToTable("Test1MainItem", "DEVTest1");
                });

            modelBuilder.Entity("WebApplication2.Data.Test2MainItem", b =>
                {
                    b.HasBaseType("WebApplication2.Data.MainItem");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("tobeDeleted")
                        .HasColumnType("bit");

                    b.ToTable("Test2MainItem", "DEVTest2");
                });

            modelBuilder.Entity("WebApplication2.Data.Weld", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Master");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.ToTable("Weld", "DEV");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldDetailNDEs", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NDEStageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("ViewStateId")
                        .HasColumnType("int");

                    b.HasIndex("NDEStageId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReportId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ViewStateId");

                    b.ToTable("WeldDetailNDEs", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldDetails", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<int?>("Consumable1Id")
                        .HasColumnType("int");

                    b.Property<int?>("FitterId")
                        .HasColumnType("int");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("WeldStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("WelderId")
                        .HasColumnType("int");

                    b.HasIndex("Consumable1Id");

                    b.HasIndex("FitterId");

                    b.HasIndex("ParentId");

                    b.HasIndex("WeldStatusId");

                    b.HasIndex("WelderId");

                    b.ToTable("WeldDetails", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.Welders", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Welders", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.Welds", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("WPSId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.HasIndex("WPSId");

                    b.ToTable("Welds", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.WPSs", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Masters");

                    b.Property<string>("MyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("WPSs", "Welding");
                });

            modelBuilder.Entity("WebApplication2.Data.SheetProperties", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Sheets");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("Revision")
                        .HasColumnType("int");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.ToTable("SheetProperties", "Document");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldInfo", b =>
                {
                    b.HasBaseType("WebApplication2.Data.Weld");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.ToTable("WeldInfo", "DEV");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.ApplicationUser", b =>
                {
                    b.HasOne("WebApplication2.Data.Project", "SelectedProject")
                        .WithMany()
                        .HasForeignKey("CurrentProject");

                    b.HasOne("WebApplication2.Data.Tenant", "SelectedTenant")
                        .WithMany()
                        .HasForeignKey("CurrentTenant");

                    b.Navigation("SelectedProject");

                    b.Navigation("SelectedTenant");
                });

            modelBuilder.Entity("WebApplication2.Data.Devices", b =>
                {
                    b.HasOne("WebApplication2.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebApplication2.Data.MainItem", b =>
                {
                    b.HasOne("WebApplication2.Data.Type", "MainType")
                        .WithMany("MainItems")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainType");
                });

            modelBuilder.Entity("WebApplication2.Data.Master", b =>
                {
                    b.HasOne("WebApplication2.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CU");

                    b.HasOne("WebApplication2.Data.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("MU");

                    b.HasOne("WebApplication2.Data.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("WebApplication2.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Project");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("WebApplication2.Data.Module", b =>
                {
                    b.HasOne("WebApplication2.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("WebApplication2.Data.Project", b =>
                {
                    b.HasOne("WebApplication2.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("WebApplication2.Data.Scan", b =>
                {
                    b.HasOne("WebApplication2.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("WebApplication2.Data.UserSettings", b =>
                {
                    b.HasOne("WebApplication2.Data.ApplicationUser", "CreatedBy")
                        .WithMany("UserSettings")
                        .HasForeignKey("CU");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("WebApplication2.Data.ApplicationRole", b =>
                {
                    b.HasOne("WebApplication2.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("WebApplication2.Data.Class", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Class", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Consumables", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Consumables", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Drawing", b =>
                {
                    b.HasOne("WebApplication2.Data.Master", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Drawing", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Drawings", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Drawings", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Fitters", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Fitters", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.NDEReports", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.NDEReports", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.NDEs", "NDE")
                        .WithMany()
                        .HasForeignKey("NDEId");

                    b.Navigation("NDE");
                });

            modelBuilder.Entity("WebApplication2.Data.NDERequests", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.NDERequests", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.NDEs", "NDE")
                        .WithMany()
                        .HasForeignKey("NDEId");

                    b.Navigation("NDE");
                });

            modelBuilder.Entity("WebApplication2.Data.Sheet", b =>
                {
                    b.HasOne("WebApplication2.Data.Master", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Sheet", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.Drawing", "Drawing")
                        .WithMany("Sheets")
                        .HasForeignKey("ParentId");

                    b.Navigation("Drawing");
                });

            modelBuilder.Entity("WebApplication2.Data.Sheets", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Sheets", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Test1MainItem", b =>
                {
                    b.HasOne("WebApplication2.Data.MainItem", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Test1MainItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Test2MainItem", b =>
                {
                    b.HasOne("WebApplication2.Data.MainItem", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Test2MainItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Weld", b =>
                {
                    b.HasOne("WebApplication2.Data.Master", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Weld", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.Sheet", "Sheet")
                        .WithMany("Welds")
                        .HasForeignKey("ParentId");

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldDetailNDEs", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.WeldDetailNDEs", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.NDEStages", "NDEStages")
                        .WithMany()
                        .HasForeignKey("NDEStageId");

                    b.HasOne("WebApplication2.Data.WeldDetails", "WeldDetails")
                        .WithMany("WeldDetailNDEs")
                        .HasForeignKey("ParentId");

                    b.HasOne("WebApplication2.Data.NDEReports", "NDEReports")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.HasOne("WebApplication2.Data.NDERequests", "NDERequests")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("WebApplication2.Data.States", "State")
                        .WithMany()
                        .HasForeignKey("ViewStateId");

                    b.Navigation("NDEReports");

                    b.Navigation("NDERequests");

                    b.Navigation("NDEStages");

                    b.Navigation("State");

                    b.Navigation("WeldDetails");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldDetails", b =>
                {
                    b.HasOne("WebApplication2.Data.Consumables", "Consumable1")
                        .WithMany()
                        .HasForeignKey("Consumable1Id");

                    b.HasOne("WebApplication2.Data.Fitters", "Fitters")
                        .WithMany()
                        .HasForeignKey("FitterId");

                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.WeldDetails", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.Welds", "Welds")
                        .WithMany("WeldDetails")
                        .HasForeignKey("ParentId");

                    b.HasOne("WebApplication2.Data.WeldStatuses", "WeldStatuses")
                        .WithMany()
                        .HasForeignKey("WeldStatusId");

                    b.HasOne("WebApplication2.Data.Welders", "Welders")
                        .WithMany()
                        .HasForeignKey("WelderId");

                    b.Navigation("Consumable1");

                    b.Navigation("Fitters");

                    b.Navigation("WeldStatuses");

                    b.Navigation("Welders");

                    b.Navigation("Welds");
                });

            modelBuilder.Entity("WebApplication2.Data.Welders", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Welders", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.Welds", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.Welds", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.SheetProperties", "SheetProperties")
                        .WithMany("Welds")
                        .HasForeignKey("ParentId");

                    b.HasOne("WebApplication2.Data.WPSs", "WPSs")
                        .WithMany()
                        .HasForeignKey("WPSId");

                    b.Navigation("SheetProperties");

                    b.Navigation("WPSs");
                });

            modelBuilder.Entity("WebApplication2.Data.WPSs", b =>
                {
                    b.HasOne("WebApplication2.Data.Masters", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.WPSs", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.SheetProperties", b =>
                {
                    b.HasOne("WebApplication2.Data.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("WebApplication2.Data.Sheets", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.SheetProperties", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Data.Drawings", "Drawings")
                        .WithMany("SheetProperties")
                        .HasForeignKey("ParentId");

                    b.Navigation("Class");

                    b.Navigation("Drawings");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldInfo", b =>
                {
                    b.HasOne("WebApplication2.Data.Weld", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.Data.WeldInfo", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Data.ApplicationUser", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("WebApplication2.Data.Type", b =>
                {
                    b.Navigation("MainItems");
                });

            modelBuilder.Entity("WebApplication2.Data.Drawing", b =>
                {
                    b.Navigation("Sheets");
                });

            modelBuilder.Entity("WebApplication2.Data.Drawings", b =>
                {
                    b.Navigation("SheetProperties");
                });

            modelBuilder.Entity("WebApplication2.Data.Sheet", b =>
                {
                    b.Navigation("Welds");
                });

            modelBuilder.Entity("WebApplication2.Data.WeldDetails", b =>
                {
                    b.Navigation("WeldDetailNDEs");
                });

            modelBuilder.Entity("WebApplication2.Data.Welds", b =>
                {
                    b.Navigation("WeldDetails");
                });

            modelBuilder.Entity("WebApplication2.Data.SheetProperties", b =>
                {
                    b.Navigation("Welds");
                });
#pragma warning restore 612, 618
        }
    }
}
